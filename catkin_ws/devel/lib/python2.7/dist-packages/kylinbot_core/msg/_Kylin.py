# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kylinbot_core/Kylin.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import kylinbot_core.msg

class Kylin(genpy.Message):
  _md5sum = "7131cdc32dd59ffa695dfef23c1bbcb8"
  _type = "kylinbot_core/Kylin"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 frame_id
CBUS cbus

================================================================================
MSG: kylinbot_core/CBUS
uint32 fs
int16 px
int16 py
int16 pz
int16 pe
int16 pc
int16 vx
int16 vy
int16 vz
int16 ve
int16 vc
"""
  __slots__ = ['frame_id','cbus']
  _slot_types = ['uint32','kylinbot_core/CBUS']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id,cbus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Kylin, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = 0
      if self.cbus is None:
        self.cbus = kylinbot_core.msg.CBUS()
    else:
      self.frame_id = 0
      self.cbus = kylinbot_core.msg.CBUS()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I10h().pack(_x.frame_id, _x.cbus.fs, _x.cbus.px, _x.cbus.py, _x.cbus.pz, _x.cbus.pe, _x.cbus.pc, _x.cbus.vx, _x.cbus.vy, _x.cbus.vz, _x.cbus.ve, _x.cbus.vc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cbus is None:
        self.cbus = kylinbot_core.msg.CBUS()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.frame_id, _x.cbus.fs, _x.cbus.px, _x.cbus.py, _x.cbus.pz, _x.cbus.pe, _x.cbus.pc, _x.cbus.vx, _x.cbus.vy, _x.cbus.vz, _x.cbus.ve, _x.cbus.vc,) = _get_struct_2I10h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I10h().pack(_x.frame_id, _x.cbus.fs, _x.cbus.px, _x.cbus.py, _x.cbus.pz, _x.cbus.pe, _x.cbus.pc, _x.cbus.vx, _x.cbus.vy, _x.cbus.vz, _x.cbus.ve, _x.cbus.vc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cbus is None:
        self.cbus = kylinbot_core.msg.CBUS()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.frame_id, _x.cbus.fs, _x.cbus.px, _x.cbus.py, _x.cbus.pz, _x.cbus.pe, _x.cbus.pc, _x.cbus.vx, _x.cbus.vy, _x.cbus.vz, _x.cbus.ve, _x.cbus.vc,) = _get_struct_2I10h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I10h = None
def _get_struct_2I10h():
    global _struct_2I10h
    if _struct_2I10h is None:
        _struct_2I10h = struct.Struct("<2I10h")
    return _struct_2I10h
