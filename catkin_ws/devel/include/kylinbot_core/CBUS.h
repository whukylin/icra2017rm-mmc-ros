// Generated by gencpp from file kylinbot_core/CBUS.msg
// DO NOT EDIT!


#ifndef KYLINBOT_CORE_MESSAGE_CBUS_H
#define KYLINBOT_CORE_MESSAGE_CBUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kylinbot_core
{
template <class ContainerAllocator>
struct CBUS_
{
  typedef CBUS_<ContainerAllocator> Type;

  CBUS_()
    : fs(0)
    , px(0)
    , py(0)
    , pz(0)
    , pe(0)
    , pc(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , ve(0)
    , vc(0)  {
    }
  CBUS_(const ContainerAllocator& _alloc)
    : fs(0)
    , px(0)
    , py(0)
    , pz(0)
    , pe(0)
    , pc(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , ve(0)
    , vc(0)  {
  (void)_alloc;
    }



   typedef uint32_t _fs_type;
  _fs_type fs;

   typedef int16_t _px_type;
  _px_type px;

   typedef int16_t _py_type;
  _py_type py;

   typedef int16_t _pz_type;
  _pz_type pz;

   typedef int16_t _pe_type;
  _pe_type pe;

   typedef int16_t _pc_type;
  _pc_type pc;

   typedef int16_t _vx_type;
  _vx_type vx;

   typedef int16_t _vy_type;
  _vy_type vy;

   typedef int16_t _vz_type;
  _vz_type vz;

   typedef int16_t _ve_type;
  _ve_type ve;

   typedef int16_t _vc_type;
  _vc_type vc;




  typedef boost::shared_ptr< ::kylinbot_core::CBUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kylinbot_core::CBUS_<ContainerAllocator> const> ConstPtr;

}; // struct CBUS_

typedef ::kylinbot_core::CBUS_<std::allocator<void> > CBUS;

typedef boost::shared_ptr< ::kylinbot_core::CBUS > CBUSPtr;
typedef boost::shared_ptr< ::kylinbot_core::CBUS const> CBUSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kylinbot_core::CBUS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kylinbot_core::CBUS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kylinbot_core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'kylinbot_core': ['/home/ubuntu/workspace/icra2017rm-mmc-ros/catkin_ws/src/kylinbot_core/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kylinbot_core::CBUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kylinbot_core::CBUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kylinbot_core::CBUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kylinbot_core::CBUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kylinbot_core::CBUS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kylinbot_core::CBUS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kylinbot_core::CBUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fce3d0dc3169a0815342b4ce4be9c7";
  }

  static const char* value(const ::kylinbot_core::CBUS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fce3d0dc3169a0ULL;
  static const uint64_t static_value2 = 0x815342b4ce4be9c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::kylinbot_core::CBUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kylinbot_core/CBUS";
  }

  static const char* value(const ::kylinbot_core::CBUS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kylinbot_core::CBUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 fs\n\
int16 px\n\
int16 py\n\
int16 pz\n\
int16 pe\n\
int16 pc\n\
int16 vx\n\
int16 vy\n\
int16 vz\n\
int16 ve\n\
int16 vc\n\
";
  }

  static const char* value(const ::kylinbot_core::CBUS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kylinbot_core::CBUS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fs);
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.pe);
      stream.next(m.pc);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.ve);
      stream.next(m.vc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CBUS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kylinbot_core::CBUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kylinbot_core::CBUS_<ContainerAllocator>& v)
  {
    s << indent << "fs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.fs);
    s << indent << "px: ";
    Printer<int16_t>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<int16_t>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pz);
    s << indent << "pe: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pe);
    s << indent << "pc: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pc);
    s << indent << "vx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vz);
    s << indent << "ve: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ve);
    s << indent << "vc: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KYLINBOT_CORE_MESSAGE_CBUS_H
